==537359== Memcheck, a memory error detector
==537359== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==537359== Using Valgrind-3.16.1 and LibVEX; rerun with -h for copyright info
==537359== Command: ../fjb.out src/index.js
==537359== 
==537359== Invalid read of size 8
==537359==    at 0x118F79: visitor_visit_function (visitor.c:391)
==537359==    by 0x11A17C: visitor_visit (visitor.c:743)
==537359==    by 0x1191A2: visitor_visit_compound (visitor.c:428)
==537359==    by 0x11A0F8: visitor_visit (visitor.c:739)
==537359==    by 0x118E3E: visitor_visit_function (visitor.c:374)
==537359==    by 0x11A17C: visitor_visit (visitor.c:743)
==537359==    by 0x119C4B: visitor_visit_binop (visitor.c:641)
==537359==    by 0x11A200: visitor_visit (visitor.c:747)
==537359==    by 0x1191A2: visitor_visit_compound (visitor.c:428)
==537359==    by 0x11A0F8: visitor_visit (visitor.c:739)
==537359==    by 0x10E086: fjb (fjb.c:71)
==537359==    by 0x11811C: visitor_visit_import (visitor.c:153)
==537359==  Address 0x98 is not stack'd, malloc'd or (recently) free'd
==537359== 
==537359== 
==537359== Process terminating with default action of signal 11 (SIGSEGV)
==537359==  Access not within mapped region at address 0x98
==537359==    at 0x118F79: visitor_visit_function (visitor.c:391)
==537359==    by 0x11A17C: visitor_visit (visitor.c:743)
==537359==    by 0x1191A2: visitor_visit_compound (visitor.c:428)
==537359==    by 0x11A0F8: visitor_visit (visitor.c:739)
==537359==    by 0x118E3E: visitor_visit_function (visitor.c:374)
==537359==    by 0x11A17C: visitor_visit (visitor.c:743)
==537359==    by 0x119C4B: visitor_visit_binop (visitor.c:641)
==537359==    by 0x11A200: visitor_visit (visitor.c:747)
==537359==    by 0x1191A2: visitor_visit_compound (visitor.c:428)
==537359==    by 0x11A0F8: visitor_visit (visitor.c:739)
==537359==    by 0x10E086: fjb (fjb.c:71)
==537359==    by 0x11811C: visitor_visit_import (visitor.c:153)
==537359==  If you believe this happened as a result of a stack
==537359==  overflow in your program's main thread (unlikely but
==537359==  possible), you can try to increase the size of the
==537359==  main thread stack using the --main-stacksize= flag.
==537359==  The main thread stack size used in this run was 8388608.
==537359== 
==537359== HEAP SUMMARY:
==537359==     in use at exit: 9,328,070 bytes in 96,243 blocks
==537359==   total heap usage: 428,821 allocs, 332,578 frees, 7,441,909,281 bytes allocated
==537359== 
==537359== LEAK SUMMARY:
==537359==    definitely lost: 472 bytes in 42 blocks
==537359==    indirectly lost: 88 bytes in 11 blocks
==537359==      possibly lost: 0 bytes in 0 blocks
==537359==    still reachable: 9,327,510 bytes in 96,190 blocks
==537359==         suppressed: 0 bytes in 0 blocks
==537359== Rerun with --leak-check=full to see details of leaked memory
==537359== 
==537359== For lists of detected and suppressed errors, rerun with: -s
==537359== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
